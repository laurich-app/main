version: "3.9"

networks:
  default:
    name: laurichapp_networks

services:
  discovery:
    image: consul:1.15
    restart: always
    ports:
      - 8500:8500
    healthcheck:
      test: curl -f http://localhost:8500/v1/status/leader
      interval: 10s
      timeout: 10s
      retries: 5

  serveur-conf:
    image: ghcr.io/laurich-app/serveur-conf:latest
    restart: always
    environment:
      - CONSUL_HOST=discovery
      - CONSUL_PORT=8500
    healthcheck:
      test: curl -f http://localhost:8888/actuator/health
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      discovery:
        condition: service_healthy

  # ===========================
  #         Utilisateur
  # ===========================

  postgres-utilisateur:
    image: postgres:12.17
    environment:
      - POSTGRES_DB=service-utilisateur
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pswd
      - HIBERNATE_MIGRATION=update
    healthcheck:
      test: /usr/bin/pg_isready
      interval: 5s
      timeout: 10s

  service-utilisateur:
    image: ghcr.io/laurich-app/service-utilisateur:latest
    container_name: service-utilisateur
    environment:
      - URL_CONFIG_SERVEUR=http://serveur-conf:8888
      - CONSUL_HOST=discovery
      - CONSUL_PORT=8500
      - PRIVATE_KEY=app_pkcs8.prv
      - PUBLIC_KEY=app.pub
      - POSTGRES_URL=jdbc:postgresql://postgres-utilisateur:5432/service-utilisateur
      - POSTGRES_USER=user
      - POSTGRES_PSWD=pswd
      - RABBIT_HOST=rabbit
      - HIBERNATE_MIGRATION=update
    depends_on:
      serveur-conf:
        condition: service_healthy
      discovery:
        condition: service_healthy
      postgres-utilisateur:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    restart: always
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health
      interval: 10s
      timeout: 10s
      retries: 5

  # ===========================
  #          Commande
  # ===========================

  mongo-commande:
    image: mongo:7.0.5
    environment:
      - MONGO_INITDB_DATABASE=service-commande
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pswd
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --username user --password pswd --authenticationDatabase admin --eval
      interval: 10s
      timeout: 10s

  service-commande:
    image: ghcr.io/laurich-app/service-commandes:latest
    container_name: service-commande
    environment:
      - URL_CONFIG_SERVEUR=http://serveur-conf:8888
      - CONSUL_HOST=discovery
      - CONSUL_PORT=8500
      - MONGO_URL=mongodb://user:pswd@mongo-commande:27017/
      - MONGO_DATABASE=commande
      - RABBIT_HOST=rabbit
    depends_on:
      serveur-conf:
        condition: service_healthy
      discovery:
        condition: service_healthy
      mongo-commande:
        condition: service_healthy
      rabbit:
        condition: service_healthy
      service-utilisateur:
        condition: service_healthy
    restart: always
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health
      interval: 10s
      timeout: 10s
      retries: 5

  # ===========================
  #          Produits
  # ===========================

  postgres-produits:
    image: postgres:12.17
    environment:
      - POSTGRES_DB=service-produits
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pswd
    healthcheck:
      test: /usr/bin/pg_isready
      interval: 5s
      timeout: 10s

  service-produits:
    image: ghcr.io/laurich-app/service-produits:latest
    container_name: service-produits
    environment:
      - URL_CONFIG_SERVEUR=http://serveur-conf:8888
      - CONSUL_HOST=discovery
      - CONSUL_PORT=8500
      - POSTGRES_URL=jdbc:postgresql://postgres-produits:5432/service-produits
      - POSTGRES_USER=user
      - POSTGRES_PSWD=pswd
      - RABBIT_HOST=rabbit
      - HIBERNATE_MIGRATION=update
    depends_on:
      serveur-conf:
        condition: service_healthy
      discovery:
        condition: service_healthy
      postgres-produits:
        condition: service_healthy
      rabbit:
        condition: service_healthy
      service-utilisateur:
        condition: service_healthy
    restart: always
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health
      interval: 10s
      timeout: 10s
      retries: 5

  # ===========================
  #        Notification
  # ===========================

  service-notification:
    image: ghcr.io/laurich-app/service-notification:latest
    container_name: service-notification
    environment:
      - URL_CONFIG_SERVEUR=http://serveur-conf:8888
      - CONSUL_HOST=discovery
      - CONSUL_PORT=8500
      - MONGO_URL=mongodb://user:pswd@mongo-notification:27017/
      - MONGO_DATABASE=notification
      - CLIENT_URL=http://localhost:8080
      - RABBIT_HOST=rabbit
    depends_on:
      serveur-conf:
        condition: service_healthy
      discovery:
        condition: service_healthy
      rabbit:
        condition: service_healthy
      service-utilisateur:
        condition: service_healthy
      mongo-notification:
        condition: service_healthy
    restart: always
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health
      interval: 10s
      timeout: 10s
      retries: 5

  mongo-notification:
    image: mongo:7.0.5
    environment:
      - MONGO_INITDB_DATABASE=notification
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pswd
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --username user --password pswd --authenticationDatabase admin --eval
      interval: 10s
      timeout: 10s

  # ===========================
  #     Reapprovisionnement
  # ===========================

  service-reapprovisionnement:
    container_name: service-reappro
    image: ghcr.io/laurich-app/service-reapprovisionnement:latest
    environment:
      - CONSUL_HOST=discovery
      - CONSUL_PORT=8500
      - MONGO_URL=mongodb://user:pswd@mongo-reappro:27017/
      - MONGO_DATABASE=reappro
      - RABBIT_HOST=rabbit
    depends_on:
      discovery:
        condition: service_healthy
      mongo-reappro:
        condition: service_healthy
      rabbit:
        condition: service_healthy
      service-utilisateur:
        condition: service_healthy
    restart: always
    healthcheck:
      test: apt update -y && apt install -y curl && curl -f http://localhost:5200/health
      interval: 10s
      timeout: 10s
      retries: 5

  mongo-reappro:
    image: mongo:7.0.5
    environment:
      - MONGO_INITDB_DATABASE=reappro
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pswd
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --username user --password pswd --authenticationDatabase admin --eval
      interval: 10s
      timeout: 10s

  # ===========================
  #          Client
  # ===========================

  client:
    image: ghcr.io/laurich-app/client:latest
    restart: always
    healthcheck:
      test: curl -f http://localhost
      interval: 10s
      timeout: 10s
      retries: 5

  # ===========================
  #          Gateway
  # ===========================

  service-passerelle:
    image: ghcr.io/laurich-app/service-passerelle:latest
    ports:
      - 8080:8080
    restart: always
    environment:
      - CLIENT_URL=http://client
      - CONSUL_HOST=discovery
      - CONSUL_PORT=8500
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health
      interval: 10s
      timeout: 10s
      retries: 5

  # ===========================
  #         RabbitMQ
  # ===========================

  rabbit:
    build: ./rabbitmq
    restart: always
    environment:
      - CONSUL_HOST=discovery
      - CONSUL_PORT=8500
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
    depends_on:
      discovery:
        condition: service_healthy
